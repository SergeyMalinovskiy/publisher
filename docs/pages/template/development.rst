Development
===========

Наш процесс разработки ориентирован на высокое качество и удобство разработки.
Мы используем инструменты, которые зарекомендовали себя как лучшие в своем классе.

Существует два возможных способа разработки приложений.

1. локальная разработка
2. разработка с использованием ``docker``

Вы можете выбрать один из них или использовать оба одновременно.
Как выбрать, какой метод использовать?

Локальная разработка намного проще и быстрее.
Вы можете выбрать его, если у вас не слишком много инфраструктурных зависимостей.
Это вариант по умолчанию для новых проектов.

Выбор разработки ``docker`` означает, что у вас уже есть сложная
настройка различных технологий, контейнеров, сетей и т.д.
Это вариант по умолчанию для старых и более сложных проектов.


Зависимости
------------

Мы используем ``poetry`` для управления зависимостями.
Поэтому, пожалуйста, не используйте ``virtualenv`` или ``pip`` напрямую.
Прежде чем продолжить, пожалуйста,
уделите время чтению официальной документации <https://poetry.eustace.io/>`_
о ``poetry``, чтобы узнать некоторые основы.

Если вы используете ``docker``, то добавьте ``docker-compose run --rm web``
перед любой из этих команд, чтобы выполнить их.

Обратите внимание, что почти все эти команды не нужны при использовании ``docker``.
Вы можете просто пропустить этот подраздел.
Переходите сразу к ``Разработке с помощью docker``.

Установка зависимостей
~~~~~~~~~~~~~~~~~~~~~~~

Вам не нужно запускать ни одну из этих команд для разработки на базе ``docker``,
поскольку они уже выполняются внутри ``Dockerfile``.

Обратите внимание, что ``poetry`` автоматически создаст ``virtualenv`` для
этого проекта. Он будет использовать текущую версию ``python``.
Для установки всех существующих зависимостей выполните:

.. code:: bash

  poetry install

Чтобы установить зависимости для производственного использования, вам нужно выполнить:

.. code:: bash

  poetry install --no-dev

И чтобы активировать ``virtualenv``, созданный ``poetry``, выполните:

.. code:: bash

  poetry shell

Добавление новых зависимостей
~~~~~~~~~~~~~~~~~~~~~~~

Чтобы добавить новые зависимости вы должны:

- ``poetry add django`` для установки ``django`` в качестве производственной зависимости
- ``poetry add --dev pytest`` для установки ``pytest``
  как зависимость для разработки

Эта команда может быть использована вместе с ``docker``.

Обновление poetry зависимостей
~~~~~~~~~~~~~~~~~~~~~~~

Менеджеры пакетов также должны быть прижаты очень строго.
У нас было много проблем в разработке
потому что мы не фиксировали версии менеджеров пакетов.

Это может привести к повреждению файлов ``lock``, несовместимому процессу установки,
странным ошибкам и отсутствию пакетов. Мы этого не хотим!

Как мы можем иметь одну и ту же версию ``poetry'' для всех пользователей в проекте?
Вот здесь и пригодится тег ``[build-system]``. Он указывает точную версию
вашей установки ``poetry``, которая должна использоваться для проекта.
Несовпадение версий приведет к неудаче сборки.

Когда вы хотите обновить ``poetry``, сделайте это в некоторых местах:

1. ``pyproject.toml``
2. ``docker/django/Dockerfile``



Разработка с использованием docker
-----------------------

Чтобы запустить сервер разработки внутри ``docker``, вам нужно запустить:

.. code:: bash

  export DOCKER_BUILDKIT=1 COMPOSE_DOCKER_CLI_BUILD=1 # enable buildkit
  docker-compose build
  docker-compose run --rm web python manage.py migrate
  docker-compose up

Выполнение скриптов внутри docker
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Как мы уже упоминали в предыдущем разделе
мы используем ``docker-compose run`` для запуска скриптов внутри docker.

Что нужно знать об этом?

1. Вы можете запускать все, что хотите: ``poetry``, ``python``, ``sh`` и т.д.
2. Скорее всего, это будет иметь постоянный эффект, из-за ``docker volumes``.
3. Вам нужно использовать ``--rm``, чтобы автоматически удалить этот контейнер после этого

**Note**: ``docker`` команды не используют ``virtualenv`` в нем.

Локальная разработка
-----------------

При клонировании проекта в первый раз может потребоваться
необходимо правильно его настроить,
см. раздел :ref:`django` для получения дополнительной информации.

**Обратите внимание**, что вам необходимо активировать ``virtualenv``, созданный
созданную ``poetry`` перед выполнением любой из этих команд.
**Примечание**, что эти команды нужно выполнять только один раз для каждого проекта.

Локальная БД
~~~~~~~~~~~~~~

При использовании локальной среды разработки без ``docker``,
вам потребуется запущенный ``postgres``.
Для создания новой базы данных для разработки выполните
(убедитесь, что имена базы данных и пользователя корректны для вашего случая):

.. code:: bash

  psql postgres -U postgres -f scripts/create_dev_database.sql

Для выполнении миграций

.. code:: bash

  python manage.py migrate

Запуск проекта
~~~~~~~~~~~~~~~

.. code:: bash

  python manage.py runserver
